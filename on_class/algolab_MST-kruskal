import sys

def mst_kruskal(graph, nodes):

    mst = []
    p = [int(i) for i in range(0, nodes+1)]

    def find(u):
        if u!= p[u]:
            p[u] = find(p[u])
        return p[u]

    def union(u, v):
        root1 = find(u)
        root2 = find(v)
        p[root2] = root1

    tree_edges = 0
    mst_cost = 0

    while True:
        if tree_edges == n-1:
            break
        u, v, wt = graph.pop(0)
        if find(u) != find(v):  # u, v가 서로 다른 집합에 속해 있으면
            union(u, v)
            mst.append((u, v))
            mst_cost += wt
            tree_edges += 1

    return mst_cost


if __name__ == '__main__':
    rpt = int(sys.stdin.readline()) # time to repeat
    for _ in range(rpt):
        n = int(sys.stdin.readline()) # number of node
        graph = []
        for _ in range(n):
            adj = list(map(int, sys.stdin.readline().split()))
            node = adj.pop(0)   # number of current line node
            vernum = adj.pop(0) # number of vertexes
            for i in range(0, vernum * 2, 2):
                graph.append((node, adj[i], adj[i+1]))
        graph.sort(key=lambda x:(x[2], x[0], x[1])) # use tuple to assign multiple key for sorting
        print(mst_kruskal(graph, n))